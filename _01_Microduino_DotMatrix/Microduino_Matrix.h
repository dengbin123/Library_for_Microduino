#ifndef Microduino_Matrix_h
#define Microduino_Matrix_h

#if (ARDUINO >= 100)
 #include "Arduino.h"
 #include "Print.h"
#else
 #include "WProgram.h"
#endif

#include <Wire.h>

#define FONE_SIZE_X 5

const static byte alphabetBitmap[95][FONE_SIZE_X+1]={
{0x00,0x00,0x00,0x00,0x00,0x02},// ",0
{0x00,0x00,0x00,0x5F,0x00,0x02},//!",1
{0x00,0x03,0x00,0x03,0x00,0x04},//"",2
{0x28,0x7C,0x7C,0x28,0x00,0x05},//#",3
{0x4C,0x7A,0x4F,0x32,0x00,0x05},//$",4
{0x66,0x16,0x68,0x66,0x00,0x05},//%",5
{0x38,0x4F,0x4D,0x32,0x00,0x05},//&",6
{0x00,0x00,0x00,0x03,0x00,0x02},//'",7
{0x00,0x00,0x3E,0x41,0x00,0x03},//(",8
{0x00,0x00,0x41,0x3E,0x00,0x03},//)",9
{0x00,0x14,0x08,0x14,0x00,0x04},//*",10
{0x00,0x08,0x3E,0x08,0x00,0x04},//+",11
{0x00,0x00,0x40,0x20,0x00,0x03},//,",12
{0x00,0x08,0x08,0x08,0x00,0x04},//-",13
{0x00,0x00,0x00,0x40,0x00,0x02},//.",14
{0x00,0x60,0x3E,0x03,0x00,0x04},///",15
{0x3E,0x41,0x41,0x3E,0x00,0x05},//0",16
{0x00,0x42,0x7F,0x40,0x00,0x04},//1",17
{0x62,0x51,0x49,0x46,0x00,0x05},//2",18
{0x22,0x49,0x49,0x36,0x00,0x05},//3",19
{0x38,0x26,0x7F,0x20,0x00,0x05},//4",20
{0x4F,0x49,0x49,0x31,0x00,0x05},//5",21
{0x3E,0x49,0x49,0x32,0x00,0x05},//6",22
{0x03,0x71,0x09,0x07,0x00,0x05},//7",23
{0x36,0x49,0x49,0x36,0x00,0x05},//8",24
{0x26,0x49,0x49,0x3E,0x00,0x05},//9",25
{0x00,0x00,0x00,0x66,0x00,0x02},//:",26
{0x00,0x00,0x40,0x26,0x00,0x03},//;",27
{0x08,0x14,0x22,0x41,0x00,0x05},//<",28
{0x14,0x14,0x14,0x14,0x00,0x05},//=",29
{0x41,0x22,0x14,0x08,0x00,0x05},//>",30
{0x02,0x51,0x09,0x06,0x00,0x05},//?",31
{0x0E,0x71,0x49,0x7E,0x00,0x05},//@",32
{0x7E,0x11,0x11,0x7E,0x00,0x05},//A",33
{0x7F,0x49,0x49,0x36,0x00,0x05},//B",34
{0x3E,0x41,0x41,0x22,0x00,0x05},//C",35
{0x7F,0x41,0x41,0x3E,0x00,0x05},//D",36
{0x7F,0x49,0x49,0x41,0x00,0x05},//E",37
{0x7F,0x09,0x09,0x01,0x00,0x05},//F",38
{0x3E,0x41,0x49,0x3A,0x00,0x05},//G",39
{0x7F,0x08,0x08,0x7F,0x00,0x05},//H",40
{0x00,0x41,0x7F,0x41,0x00,0x04},//I",41
{0x30,0x40,0x40,0x3F,0x00,0x05},//J",42
{0x7F,0x08,0x14,0x63,0x00,0x05},//K",43
{0x7F,0x40,0x40,0x40,0x00,0x05},//L",44
{0x7F,0x06,0x06,0x7F,0x00,0x05},//M",45
{0x7F,0x0C,0x30,0x7F,0x00,0x05},//N",46
{0x7F,0x41,0x41,0x7F,0x00,0x05},//O",47
{0x7F,0x09,0x09,0x06,0x00,0x05},//P",48
{0x3E,0x51,0x61,0x7E,0x00,0x05},//Q",49
{0x7F,0x19,0x29,0x46,0x00,0x05},//R",50
{0x26,0x49,0x49,0x32,0x00,0x05},//S",51
{0x01,0x7F,0x01,0x01,0x00,0x05},//T",52
{0x3F,0x40,0x40,0x3F,0x00,0x05},//U",53
{0x0F,0x70,0x70,0x0F,0x00,0x05},//V",54
{0x7F,0x30,0x30,0x7F,0x00,0x05},//W",55
{0x63,0x1C,0x1C,0x63,0x00,0x05},//X",56
{0x03,0x0C,0x78,0x07,0x00,0x05},//Y",57
{0x61,0x59,0x4D,0x43,0x00,0x05},//Z",58
{0x00,0x00,0x7F,0x41,0x00,0x03},//[",59
{0x00,0x03,0x3E,0x60,0x00,0x04},//\",60
{0x00,0x00,0x41,0x7F,0x00,0x03},//]",61
{0x00,0x04,0x02,0x04,0x00,0x04},//^",62
{0x00,0x40,0x40,0x40,0x00,0x04},//_",63
{0x00,0x00,0x01,0x02,0x00,0x03},//`",64
{0x30,0x48,0x48,0x70,0x00,0x05},//a",65
{0x7F,0x48,0x48,0x30,0x00,0x05},//b",66
{0x30,0x48,0x48,0x48,0x00,0x05},//c",67
{0x30,0x48,0x48,0x7F,0x00,0x05},//d",68
{0x30,0x58,0x58,0x10,0x00,0x05},//e",69
{0x00,0x08,0x7C,0x0A,0x00,0x04},//f",70
{0x08,0x54,0x54,0x3C,0x00,0x05},//g",71
{0x00,0x7F,0x08,0x78,0x00,0x05},//h",72
{0x00,0x00,0x00,0x74,0x00,0x02},//i",73
{0x00,0x00,0x40,0x3A,0x00,0x03},//j",74
{0x7F,0x10,0x28,0x48,0x00,0x05},//k",75
{0x00,0x00,0x7F,0x40,0x00,0x03},//l",76
{0x78,0x08,0x78,0x78,0x00,0x05},//m",77
{0x78,0x08,0x08,0x70,0x00,0x05},//n",78
{0x30,0x48,0x48,0x30,0x00,0x05},//o",79
{0x7C,0x24,0x24,0x18,0x00,0x05},//p",80
{0x18,0x24,0x24,0x7C,0x00,0x05},//q",81
{0x78,0x10,0x08,0x08,0x00,0x05},//r",82
{0x50,0x58,0x68,0x28,0x00,0x05},//s",83
{0x00,0x08,0x7C,0x48,0x00,0x04},//t",84
{0x38,0x40,0x40,0x78,0x00,0x05},//u",85
{0x00,0x30,0x40,0x30,0x00,0x04},//v",86
{0x38,0x60,0x60,0x38,0x00,0x05},//w",87
{0x48,0x30,0x30,0x48,0x00,0x05},//x",88
{0x0C,0x50,0x50,0x3C,0x00,0x05},//y",89
{0x48,0x68,0x58,0x48,0x00,0x05},//z",90
{0x00,0x08,0x3E,0x41,0x00,0x04},//{",91
{0x00,0x00,0x7F,0x00,0x00,0x03},//|",92
{0x00,0x41,0x3E,0x08,0x00,0x04},//}",93
{0x02,0x01,0x02,0x01,0x00,0x05}//~",94
};

typedef struct  {
  uint8_t nbr        :6 ; 
} Matrix_t   ;  

typedef struct {
  Matrix_t Addr;
} matrix_t;

class LedControl : public Print {
 public:
    LedControl(int _addr);

    int getDeviceAddr();

    void clearDisplay();

    void setColor(uint8_t value_r, uint8_t value_g, uint8_t value_b);
    void clearColor();
	
	void setLed(int row, int column, boolean state);
	void setLedColor(int row, int column, uint8_t value_r, uint8_t value_g, uint8_t value_b);
	void setLedColorFast(int row, int column, uint8_t value_r, uint8_t value_g, uint8_t value_b);
	void setFastMode();
	void clearFastMode();
	
	void setRow(int row, byte value);	
	void setColumn(int col, byte value);
	 		
    void setCursor(int16_t x, int16_t y);
    virtual size_t write(uint8_t);
	void writeString(int time, char * displayString);

 protected:
  int Devices_addr;
  bool Fast_mode;
  uint8_t value_color[3];
  // const int16_t
    // WIDTH, HEIGHT;   // This is the 'raw' display w/h - never changes
  int16_t cursor_x, cursor_y;

  int16_t _width, _height; // Display w/h as modified by current rotation
  // uint16_t
    // textcolor, textbgcolor;
  // uint8_t
    // textsize,
    // rotation;

  byte status[64];
 private :
    uint8_t matrixIndex;               // index into the channel data for this key
    void displayChar(int row, int column, char charIndex);
};

#endif